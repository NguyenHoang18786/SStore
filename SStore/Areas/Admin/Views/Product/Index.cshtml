@model PagedList.IPagedList<SStore.Models.Product>
@using PagedList.Mvc;
@using PagedList;

@{
    ViewBag.Title = "Products";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid my-2">
    @* Breadcrumb *@
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard", new { area = "Admin" })" class="breadcrumb-client">Dashboard</a></li>
            <li class="breadcrumb-item breadcrumb-client-active">Products</li>
        </ol>
    </nav>
    @* Page Title *@
    <h1 class="text-center my-3 admin-page-title text-uppercase">Product Management</h1>

    @* Add new product and filter button *@
    <div class="mb-2 d-flex justify-content-between">
        <a type="button" class="btn sub-button" href="@Url.Action("Create", "Product", new { area = "Admin" })">
            Add New Product
        </a>
        <button class="btn sub-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions">
            <i class="bi bi-funnel"></i>
        </button>
    </div>

    @* Offcanvas *@
    <div class="offcanvas offcanvas-start" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
        <div class="offcanvas-header pb-0">
            <h4 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Filtre</h4>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>

        @using (Html.BeginForm("Index", "Product", FormMethod.Get))
        {
            <div class="offcanvas-body">
                <h5 class="mt-2">Category</h5>
                <hr />
                <div class="d-flex justify-content-between flex-wrap">
                    @foreach (var brand in ViewBag.ListCategory)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" onchange="this.form.submit()" name="CategoryFilter" value="@brand.CategoryName" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                @brand.CategoryName
                            </label>
                        </div>
                    }
                </div>
                <h5 class="mt-2">Brand</h5>
                <hr />
                <div class="d-flex justify-content-between flex-wrap">
                    @foreach (var brand in ViewBag.ListBrand)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" onchange="this.form.submit()" name="BrandFilter" value="@brand.BrandName" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                @brand.BrandName
                            </label>
                        </div>
                    }
                </div>
                <h5 class="mt-2">Price</h5>
                <hr />
                <div class="form-check p-0 d-flex justify-content-start align-items-center">
                    <span>From:&nbsp;</span>
                    <input class="form-control" type="text" name="LowPrice" value="0" id="flexCheckDefault">
                    <span>&nbsp;-&nbsp;</span>
                    <input class="form-control" type="text" name="HighPrice" value="0" id="flexCheckDefault">&nbsp;
                    <button type="submit" class="btn btn-outline-success">Search</button>
                </div>
            </div>
        }
    </div>
    @* End Offcanvas *@
    <div class="d-flex justify-content-between align-items-center">
        @using (Html.BeginForm("Index", "Product", FormMethod.Get))
        {
            <form class="d-flex col-md-auto mb-2 justify-content-center mb-md-0">
                <div class="d-flex align-items-center mb-2 mb-sm-0">
                    <input type="search" name="searchString" class="bd-search form-control me-1 form-control-dark" placeholder="search product..." />
                    <button class="btn btn-outline-success" type="submit">Search</button>
                </div>
            </form>
        }
        <p class="mb-0 d-none d-sm-block">Showing @Model.FirstItemOnPage - @Model.LastItemOnPage of @Model.TotalItemCount products</p>
    </div>
    <p class="d-block d-sm-none mb-0">Showing @Model.FirstItemOnPage - @Model.LastItemOnPage of @Model.TotalItemCount products</p>
    <div class="table-responsive">
        <table class="table table-bordered table-hover my-2">
            <tr>
                <th class="text-truncate col-1">
                    Image
                </th>
                <th class="text-truncate">
                    <a href="@Url.Action("Index", new { sortOrder = ViewBag.NameSortParm })" class="text-dark">
                        <i class="bi bi-sort-alpha-up"></i> Product Name
                    </a>
                </th>
                <th class="text-truncate">
                    <a href="@Url.Action("Index", new { sortOrder = ViewBag.CategorySortParm })" class="text-dark">
                        <i class="bi bi-sort-alpha-up"></i> Category
                    </a>
                </th>
                <th class="text-truncate">
                    <a href="@Url.Action("Index", new { sortOrder = ViewBag.BrandSortParm })" class="text-dark">
                        <i class="bi bi-sort-alpha-up"></i> Brand
                    </a>
                </th>
                <th class="text-truncate">
                    <a href="@Url.Action("Index", new { sortOrder = ViewBag.PriceSortParm })" class="text-dark">
                        <i class="bi bi-sort-up"></i> Price
                    </a>
                </th>
                <th class="text-truncate">
                    Description
                </th>
                <th class="text-truncate">
                    Action
                </th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td class="align-middle my-1">
                        <img src="~/Image/wp2461125.jpg" class="img-fluid product-image-management" style="width:100%" />
                    </td>
                    <td class="align-middle text-truncate" style="max-width: 180px">
                        @item.ProductName
                    </td>
                    <td class="align-middle text-truncate">
                        @item.ProductCategory.CategoryName
                    </td>
                    <td class="align-middle text-truncate">
                        @item.productBrand.BrandName
                    </td>
                    <td class="align-middle text-truncate">
                        @item.Price $
                    </td>
                    <td class="align-middle text-truncate" style="max-width: 300px">
                        @if (@item.Description == null)
                        {
                            <p class="fst-italic m-0 text-secondary">...</p>
                        }
                        else
                        {
                            <p class="m-0 text-truncate">@item.Description</p>
                        }
                    </td>
                    <td class="align-middle">
                        <div class="d-flex flex-nowrap">
                            <a href="@Url.Action("Details", "Product", new{ id = item.Id })" class="btn detail-button me-2">
                                <i class="bi bi-info-circle"></i>
                            </a>
                            <a href="@Url.Action("Edit", "Product", new{ id = item.Id })" class="btn edit-button me-2">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <a href="@Url.Action("Delete", "Product", new{ id = item.Id })" class="btn delete-button">
                                <i class="bi bi-trash"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            }

        </table>
    </div>

    <p class="mb-2">Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</p>
    <div class="d-none d-lg-block">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"], HighPrice = Request.QueryString["HighPrice"], LowPrice = Request.QueryString["LowPrice"], BrandFilter = Request.QueryString["BrandFilter"], CategoryFilter = Request.QueryString["CategoryFilter"] }),
                  new PagedListRenderOptions()
                  {
                      LiElementClasses = new List<string> { "page-link" },
                      UlElementClasses = new List<string> { "pagination", "d-flex", "flex-wrap" },
                      MaximumPageNumbersToDisplay = 8,
                  })
    </div>
    <div class="d-none d-sm-block d-lg-none">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"], HighPrice = Request.QueryString["HighPrice"], LowPrice = Request.QueryString["LowPrice"], BrandFilter = Request.QueryString["BrandFilter"], CategoryFilter = Request.QueryString["CategoryFilter"] }),
                  new PagedListRenderOptions()
                  {
                      LiElementClasses = new List<string> { "page-link" },
                      UlElementClasses = new List<string> { "pagination", "d-flex", "flex-wrap" },
                      MaximumPageNumbersToDisplay = 5,
                  })
    </div>
    <div class="d-block d-sm-none">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"], HighPrice = Request.QueryString["HighPrice"], LowPrice = Request.QueryString["LowPrice"], BrandFilter = Request.QueryString["BrandFilter"], CategoryFilter = Request.QueryString["CategoryFilter"] }),
                  new PagedListRenderOptions()
                  {
                      LiElementClasses = new List<string> { "page-link" },
                      UlElementClasses = new List<string> { "pagination pagination-sm", "d-flex", "flex-wrap" },
                      MaximumPageNumbersToDisplay = 3,
                      DisplayEllipsesWhenNotShowingAllPageNumbers = false,
                      ItemSliceAndTotalFormat = "Showing items {0} through {1} of {2}.",
                  })
    </div>
</div>
