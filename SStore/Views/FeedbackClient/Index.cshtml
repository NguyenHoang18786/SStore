@model SStore.Models.Feedback

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container mt-2 mb-sm-4 mb-3">
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home", new {area = ""})" class="breadcrumb-client"><i class="bi bi-house-door"></i> Home</a></li>
            <li class="breadcrumb-item breadcrumb-client-active">Feedback</li>
        </ol>
    </nav>
    <h2 class="text-uppercase text-center page-title">Contact Us!!!</h2>
    <div class="d-flex justify-content-center">
        <div class="container-fluid" style="max-width:500px">
            <div id="liveAlertPlaceholder"></div>
            @using (Html.BeginForm("Index", "FeedbacKClient", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <form class="needs-validation" novalidate>
                    <div class="form-horizontal" novalidate>
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="mb-2">
                            <label for="Title" class="form-label fw-bold">
                                @Html.LabelFor(b => b.Title, "Title")<span class="fw-normal text-danger">*</span>
                            </label>
                            <input class="form-control" name="Title" required>
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            <label for="Fullname" class="form-label fw-bold">
                                @Html.LabelFor(b => b.FullName, "Full Name")
                            </label>
                            @Html.TextBoxFor(b => b.FullName, new { @class = "form-control" })
                        </div>
                        <div class="mb-2">
                            <label for="Email" class="form-label fw-bold">
                                @Html.LabelFor(b => b.Email, "Email")
                            </label>
                            @Html.TextBoxFor(b => b.Email, new { @class = "form-control" })
                        </div>
                        <div class="mb-2">
                            <label for="PhoneNumber" class="form-label fw-bold">
                                @Html.LabelFor(b => b.PhoneNumber, "Phone")
                            </label>
                            @Html.TextBoxFor(b => b.PhoneNumber, new { @class = "form-control" })
                        </div>
                        <div class="mb-2">
                            <label for="Description" name="Description" class="form-label fw-bold">
                                @Html.LabelFor(b => b.Description, "Description")<span class="fw-normal text-danger">*</span>
                            </label>
                            <textarea class="form-control" name="Description" rows="4" placeholder="Tell us the problem you are having ..." required></textarea>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            <div class="g-recaptcha" data-sitekey="6LdpyMMiAAAAACtdSdwZPaa8OLCkT5Xo15iBS21o"></div>
                            @if (!string.IsNullOrEmpty(ViewBag.Message))
                            {
                                <p class="m-0 text-danger">@ViewBag.Message</p>
                            }
                        </div>
                        <div class="mb-2">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" class="btn sub-button"><span class="sub-button-text">Submit</span></button>
                            </div>
                        </div>
                    </div>
                </form>
            }
            @if (ViewBag.Messages != null)
            {
                <script type="text/javascript">
                    window.onload = function () {

                        var toastLiveExample = document.getElementById('liveToast')
                        var toast = new bootstrap.Toast(toastLiveExample)
                        toast.show()
                    }
                </script>
            }
        </div>
    </div>
    <div class="position-fixed top-0 start-50 translate-middle-x p-sm-3 notification-message opacity-100" style="z-index: 1122">
        <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header align-items-center">
                <i class="bi bi-check-circle text-success"></i>&nbsp;
                <strong class="me-auto text-success">Success</strong>
                <small class="fst-italic">@DateTime.Today.ToString("g")</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Successfully sent feedback!
            </div>
        </div>
    </div>
</div>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>
<script src="https://www.google.com/recaptcha/api.js?render=reCAPTCHA_site_key"></script>
<script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit"
        async defer>
</script>