@model PagedList.IPagedList<SStore.Models.ProductCategory>
@using PagedList.Mvc;
@using PagedList;
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid my-2">
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard", new { area = "Admin" })" class="breadcrumb-client">Dashboard</a></li>
            <li class="breadcrumb-item breadcrumb-client-active">Categories</li>
        </ol>
    </nav>
    <h1 class="text-center my-3 admin-page-title text-uppercase">Category Management</h1>

    <div class="d-flex justify-content-center">
        <div class="container">
            <div class="row">
                <div class="col">
                </div>
                <div class="col-xxl-7 col-xl-8 col-lg-9 col-md-10">
                    <a type="button" class="btn sub-button mb-2" href="@Url.Action("Create", "ProductCategory", new { area = "Admin" })">
                        <span class="sub-button-text">Add New Category</span>
                    </a>
                    <div class="d-flex justify-content-between align-items-center">
                        @using (Html.BeginForm("Index", "ProductCategory", FormMethod.Get))
                        {
                            <form class="d-flex col-md-auto mb-2 justify-content-center mb-md-0">
                                <div class="d-flex align-items-center mb-2 mb-sm-0">
                                    <input type="search" name="searchString" class="bd-search form-control me-1 form-control-dark" placeholder="Search category ..." />
                                    <button class="btn btn-outline-success" type="submit">Search</button>
                                </div>
                            </form>
                        }
                        <p class="mb-0 d-none d-sm-block">Showing @Model.FirstItemOnPage - @Model.LastItemOnPage of @Model.TotalItemCount Categories</p>
                    </div>
                    <p class="d-block d-sm-none mb-0">Showing @Model.FirstItemOnPage - @Model.LastItemOnPage of @Model.TotalItemCount Categories</p>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover my-2">
                            <tr>
                                <th class="text-nowrap text-center">
                                    No
                                </th>
                                <th class="text-nowrap text-center" style="min-width: 100px">
                                    <a href="@Url.Action("Index", new { sortOrder = ViewBag.NameSortParm })" class="text-dark">
                                        <i class="bi bi-sort-alpha-up"></i> Name
                                    </a>
                                </th>
                                <th class="text-nowrap text-center">
                                    Description
                                </th>
                                <th class="text-nowrap text-center">
                                    Action
                                </th>
                            </tr>

                            @foreach (var item in Model.Select((d, i) => new { Data = d, Index = i + 1 }))
                            {
                                <tr>
                                    <td class="align-middle text-center">
                                        @item.Index
                                    </td>
                                    <td class="align-middle text-truncate text-center" style="max-width: 150px">
                                        <p class="m-0 text-truncate" title="@item.Data.CategoryName">@item.Data.CategoryName</p>
                                    </td>
                                    <td class="align-middle text-truncate" style="max-width: 300px; min-width: 200px">
                                        @if (@item.Data.Description == null)
                                        {
                                            <p class="fst-italic m-0 text-secondary text-center">...</p>
                                        }
                                        else
                                        {
                                            <p class="m-0 text-truncate text-center" title="@item.Data.Description">@item.Data.Description</p>
                                        }
                                    </td>
                                    <td class="align-middle">
                                        <div class="d-flex flex-nowrap justify-content-center">
                                            <a href="@Url.Action("Edit", "ProductCategory", new{ id = item.Data.CategoryId })" class="btn edit-button me-2">
                                                <i class="bi bi-pencil-square"></i>
                                            </a>
                                            <a href="@Url.Action("Delete", "ProductCategory", new{ id = item.Data.CategoryId })" class="btn delete-button">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }

                        </table>
                    </div>
                    <p class="mb-2">Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</p>
                    <div class="d-none d-lg-block">
                        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"] }),
                                  new PagedListRenderOptions()
                                  {
                                      LiElementClasses = new List<string> { "page-link" },
                                      UlElementClasses = new List<string> { "pagination", "d-flex", "flex-wrap" },
                                      MaximumPageNumbersToDisplay = 8,
                                  })
                    </div>
                    <div class="d-none d-sm-block d-lg-none">
                        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"] }),
                                  new PagedListRenderOptions()
                                  {
                                      LiElementClasses = new List<string> { "page-link" },
                                      UlElementClasses = new List<string> { "pagination", "d-flex", "flex-wrap" },
                                      MaximumPageNumbersToDisplay = 5,
                                  })
                    </div>
                    <div class="d-block d-sm-none">
                        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, searchString = Request.QueryString["searchString"] }),
                                  new PagedListRenderOptions()
                                  {
                                      LiElementClasses = new List<string> { "page-link" },
                                      UlElementClasses = new List<string> { "pagination pagination-sm", "d-flex", "flex-wrap" },
                                      MaximumPageNumbersToDisplay = 3,
                                      DisplayEllipsesWhenNotShowingAllPageNumbers = false,
                                      ItemSliceAndTotalFormat = "Showing items {0} through {1} of {2}.",
                                  })
                    </div>
                </div>
                <div class="col">
                </div>
            </div>
        </div>
    </div>
</div>
